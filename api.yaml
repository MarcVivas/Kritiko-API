openapi: 3.0.3
info:
  title: Kritiko
  description: |-
    Kritiko is a web platform that allows users to rate and review various forms of media including movies, TV shows, books, video games, and anime.
  version: 1.0.11

paths:
  /user/register:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new user.
      operationId: createUser
      requestBody:
        description: User data
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: bobby
                email:
                  type: string
                  example: bob@gmail.com
                password:
                  type: string
                  example: superLongPassword

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'          

        '403':
          description: The user already exists.
      
        '422':
          description: Data validation error
          
                

  
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser

      requestBody:
        description: Login data
        content:
          application/json:
            schema:
              type: object
              properties:
                username: 
                  type: string
                  example: 'bob@gmail.com'
                  description: Username or email
                password:
                  type: string
                  example: superLongPassword
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'          
        '403':
          description: Invalid username/password supplied
        '404':
          description: User not found
        '422':
          description: Validation error
          
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Token:
      type: object
      properties:
        token:
          type: string
          example: 32432l4j23l4hl234h23kj4k32

    User:
      type: object
      properties:
        _id:
          type: string
          example: d423042342304230jal
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345678'
   
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
